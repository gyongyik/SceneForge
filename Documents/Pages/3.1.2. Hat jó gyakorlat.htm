<!DOCTYPE html>

<html>

<head>
    <title>SceneForge</title>
</head>

<body style="font-family: Calibri; font-size: 13pt">
    <p style="font-size: 17pt"><b>3.1.2. Hat jó gyakorlat</b></p>
    <p>A RUP a szoftveriparban általánosan használt alapelvek, jó gyakorlatok megvalósítására és egyesítésére törekszik. A hat jó gyakorlat (Six Best Practices) az [6]-os számú forrás alapján a következő:</p>
    <p><b>A szoftvert iteratívan fejlesztjük</b></p>
    <p>A fejlesztési folyamat olyan egymást követő alprojektekből épül fel, amelyek felhasználják a már előzőleg elvégzett alprojektek eredményit, valamint új részekkel bővítik ki azokat. A fejlesztőcsapat az egyes iterációkban szerzett tapasztalatait hasznosítani tudja következő ciklus során, aminek köszönhetően jól beoszthatóvá válik a csapat munkaterhelése, s így gördülékeny lesz a fejlesztési folyamat is. Mivel a felhasználók elképzelései folyamatosan épülnek be a programba, ezért módosítási igényük esetén a fejlesztők könnyen tudnak alkalmazkodni a változásokhoz. Kicsi a kockázat, ha rossz irányba haladunk, akkor egy korábban már befejezett iterációtól lehetőség van újra átgondolni, és más úton tovább folytatni a projektet. Az iteratív fejlesztésnek köszönhetően a szoftver minden ciklus után bemutatható, illetve szükség esetén átadható a megrendelők számára.</p>
    <p><b>A követelményeket menedzseljük</b></p>
    <p>A fejlesztés kezdete előtt képtelenség teljes mértékben felmérni egy rendszer követelményeit, ezért szükség van arra, hogy a ciklusok során az elvárásokat folyamatosan bővítsük, pontosítsuk. Megfelelő menedzselés alkalmazásával nyomon követhetők az összefüggések, átláthatók a követelmények, valamint könnyebben felismerhetők az elvárások közötti ellentmondások, összeférhetetlenségek. Mindig tisztában kell lennünk azzal, hogy milyen irányába haladjunk, mert csak így tudjuk elkerülni az időt és az erőforrásokat fölöslegesen pocsékoló plusz munkát. A funkcionális összetevők kivitelezése mellett ügyelnünk kell a megfelelő teljesítmény biztosítására is, máskülönben a szoftver minősége elfogadhatatlanná válhat.</p>
    <p><b>Komponens alapú architektúrákat használunk</b></p>
    <p>A komponensek olyan zárt egységek, amelyek szabályozott módon, szabványos felületeken keresztül kapcsolódnak egymáshoz, és önmagukban is hasznosítható működést valósítanak meg. Alkalmazásuk azért előnyös, mert egymással párhuzamosan fejleszthetők, valamint a követelmények megváltozásakor könnyen kicserélhetők. Célszerű, ha először a legfontosabb komponensek kerülnek kidolgozásra, majd a továbbiakban hasznossági sorrendben készül el a többi rész, mert így a program már félkész állapotban működőképessé, tesztelhetővé válik. A komponens alapú architektúrák lehetővé teszik más projektekhez készített, nyílt forráskódú, vagy éppen a kereskedelemben fellelhető komponensek és szabványosított keretrendszerek felhasználását is, amiket változtatás nélkül, vagy minimális átalakítással bele lehet építeni a fejlesztés alatt álló szoftverbe.</p>
    <p><b>A szoftvert vizuálisan modellezzük</b></p>
    <p>A rendszerek túl bonyolultak és összetettek ahhoz, hogy teljes egészükben képesek legyünk megérteni a működésüket, ezért modelleket készítünk azokról. A modell a valóság egy meghatározott részének olyan leegyszerűsítést mása, amely egy bizonyos nézőpontból teljes körűen leír egy adott rendszert. A modellezés több szempontból is segíti a fejlesztést. Hozzájárul a változtatások közötti összefüggések megértéséhez, segíti az konzisztencia fenntartását a rendszer különböző termékei között, megkönnyíti a folyamatok menedzselését, valamint könnyebbé teszi a fejlesztőcsapat munkáját a vizualizációban, a kidolgozásban, a konstrukcióban, és a dokumentálásában is. A RUP vizuális modellezésre a korábban már említett UML modellező nyelvet használja, ami a fejlesztőcsapat tagjai számára egyértelmű kommunikációs lehetőséget biztosít.</p>
    <p><b>A szoftverminőséget rendszeresen ellenőrizzük</b></p>
    <p>A szoftver problémáinak behatárolása és kijavítása akár nagyságrendekkel is többe kerülhet a fejlesztés befejezése után, ezért fontos folyamatosan figyelemmel kísérni a rendszer minőségét, különös tekintettel annak funkcionalitására, megbízhatóságára, teljesítményére. A RUP teszteredmények és az írásos dokumentumok kiértékelésével objektív becslést ad a projekt állapotáról, valamint rávilágít a követelményekben, a tervezésben és a kivitelezésben megjelenő összeférhetetlenségekre. A tesztelés és az ellenőrzés a legnagyobb kockázatok területeire koncentrál, így javul a minőség, növekszik a hatékonyság, és mivel a hibák korán azonosításra kerülnek, ezért javításuk költsége is radikálisan csökken. A funkcionalitás, a megbízhatóság, valamint a teljesítmény tesztelésére automatizált tesztelő eszközök állnak rendelkezésünkre.</p>
    <p><b>A szoftverben bekövetkező változásokat kontrolláljuk</b></p>
    <p>Egy nagyobb projekt készítését egyszerre akár több fejlesztőcsapat is végezheti egymástól teljesen függetlenül a világ különböző pontjain. A szoftverben bekövetkező változások nyilvántartására, szinkronizálására és dokumentálására olyan rendszert kell biztosítani, amellyel a legnagyobb és legösszetettebb projekt is átlátható, gördülékenyen, probléma mentesen fejleszthető. A RUP egységes keretrendszert biztosítva a lényegtelen részletek figyelmen kívül hagyásával a fontos dolgokra próbálja meg felhívni a figyelmet. A fejlesztőcsapatok koordinációját kiterjeszti az ismétlődő munkafolyamatok létesítésére, fontossági sorrend alapján rendeli a tevékenységekhez az erőforrásokat, valamint párhuzamos munkavégzés esetén is átláthatóvá teszi a fejlesztést. A változások pontos nyomon követése és az ezekről való részletes informálás nagy segítséget nyújt egy megbízható, robusztus, jól testre szabható rendszer kiépítésében.</p>
</body>

</html>