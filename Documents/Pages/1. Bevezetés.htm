<!DOCTYPE html>

<html>

<head>
    <title>SceneForge</title>
</head>

<body style="font-family: Calibri; font-size: 13pt">
    <p style="font-size: 17pt"><b>1. BEVEZETÉS</b></p>
    <p>A pályaszerkesztő programok olyan speciális modellező eszközök, amelyekkel az általános használatra tervezett modellező szoftverekhez képest viszonylag egyszerűen és gyorsan lehet egy adott játékhoz pályákat készíteni. A SceneForge is egy ilyen könnyen kezelhető eszköz, azonban nem egy konkrét játékhoz lett kifejlesztve, hanem a klasszikus háromdimenziós pályaszerkesztők pozitív tulajdonságait ötvözve biztosít egységes felületet bármilyen 3D játék pályáinak szerkesztésére. A program alacsony poligonszámú (úgynevezett low poly) modellek és azokból felépülő pályák elkészítését teszi lehetővé. Fő erőssége az, hogy az objektumok létrehozásához és textúrázásához egyszerű, könnyen kezelhető felületet biztosít. A textúrák a felhasználó által tetszőlegesen meghatározható mappából az alkalmazás indításakor automatikusan betöltődnek, így a legtöbb 3D modellező programmal ellentétben nem kell egyesével betöltenünk azokat. Egy új objektum létrehozásakor globális koordináták alapján létrejön a textúrázáshoz szükséges UV háló, és a felhasználói felületen korábban kiválasztott textúra a modellre kerül. Az alkalmazás több fájlformátumot is támogat, amelyek biztosítják a kompatibilitást különböző játékmotorokkal (Doom 3, Quake III, Source, Unity, Unreal…), valamint 3D modellező programokkal (3ds Max, Maya, Blender…).</p>
    <p>Már régóta foglalkozom játékfejlesztéssel, aminek következtében a SceneForge elkészítése előtt rengeteg pályaszerkesztőt kipróbáltam. Természetesen mindegyiknek megvan a maga előnye és a hátránya is, de van bennük egy közös probléma. Ezek a programok általában egy adott játékmotorhoz készülnek (Unreal Engine – Unreal Editor, Source Engine – Valve Hammer Editor, CryEngine – Sandbox), amivel tökéletesen együtt tudnak működni, de a bennük készített pályákat egyáltalán nem, vagy csak nagyon körülményesen lehet másik játékmotorra átültetni. Legtöbb esetben minimális változtatásokra vagy apróbb hibajavításokra lenne szükség ahhoz, hogy a programból lehetőség legyen megfelelő fájlformátumban, hibák nélkül kimenteni a kívánt pályát. A másik probléma, hogy a hobbi szintű vagy kis költségvetésű játékmotorok többsége nem rendelkezik saját pályaszerkesztővel, így használatukhoz valamilyen külső modellező programra van szükség. Mivel a modellező programok nem erre a célra lettek kitalálva, ezért bonyolultságuk miatt csak körülményesen képesek a feladat elvégzésére. Az említett problémák kiküszöbölése céljából tartottam szükségesnek egy olyan könnyen kezelhető és egyben jól testre szabható pályaszerkesztő elkészítését, ami lehetőséget ad bármilyen tetszőleges 3D játék pályáinak a szerkesztésére.</p>
    <p>A fejlesztés során elsődlegesen azt a szempont tűztem ki magam elé, hogy a végeredmény egy egyszerű és könnyen kezelhető program legyen. Ennek a feltételnek a teljesítéséhez szemügyre vettem több ismert, klasszikusnak nevezhető pályaszerkesztőt (GtkRadiant, Valve Hammer Editor, Unreal Editor) és pár kevésbé ismertet (3D World Studio, Leadwerks Editor, Map Scape) is. A pályaszerkesztők előnyös tulajdonságait próbáltam kiválogatni és beleépíteni a saját programomba, azonban az egyszerűséget figyelembe véve a felsorolt szerkesztők összes képességének a belezsúfolása helyett csak a feltétlenül szükséges és fontos funkciók megvalósítására törekedtem.</p>
    <p>A másik fontos szempont a testre szabhatóság volt. Mivel egy programot csak úgy lehet igazán a saját igényeinkhez hozzáigazítani, ha lehetőségünk van bármit megváltoztatni benne, ezért a SceneForge forráskódját nyilvánossá tettem. A szoftver a GNU General Public License 3 feltételeinek megfelelően szabadon terjeszthető, illetve módosítható. Ennek köszönhetően bárkinek lehetősége van teljes mértékben testre szabni a programot.</p>
    <p>A szoftver elkészítéséhez szabványos, népszerű, sokak által használt eljárásokat és eszközöket vettem igénybe. A SceneForge kifejlesztését a RUP (Rational Unified Process) szoftverfejlesztési eljárás általam testre szabott változata alapján végeztem. A program szerkezeti felépítését az UML (Unified Modeling Language) modellező nyelv segítségével, az Enterprise Architect 11 vizuális modellező eszközben alakítottam ki. Annak érdekében, hogy a fejlesztés gördülékenyen menjen, az alkalmazás elkészítéséhez az Delphi XE6 fejlesztői környezetet választottam. A dokumentáció megírásához az Office 2013 irodai programcsomag Word nevű szövegszerkesztő programját használtam. A HTML alapú súgót az Expression Web 4 weblapszerkesztővel készítettem el. A SceneForge ikonjait, valamint a dokumentációban található ábrák egy részét az Inkscape vektorgrafikus szerkesztővel rajzoltam meg.</p>
    <p>A fejlesztési naplóban többnyire nyílt forráskódú vagy ingyenesen használható programok kerülnek bemutatásra, így azokat bárkinek lehetősége van kipróbálni.</p>
    <p>A következő fejezetben ismertetem a pályaszerkesztők kialakulásának körülményeit, és bemutatom az előző évtized legnépszerűbb pályaszerkesztőit. A harmadik fejezetben a SceneForge elkészítése során használt szoftverfejlesztési eljárásról, a RUP-ról esik szó. A negyedik, ötödik, hatodik, valamint hetedik fejezetben részletesen leírom a program fejlesztésének menetét, majd végül a nyolcadik fejezetben pedig összefoglalom a fejlesztés során elért eredményeket.</p>
</body>

</html>