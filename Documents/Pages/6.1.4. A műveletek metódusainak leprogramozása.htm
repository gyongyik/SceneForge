<!DOCTYPE html>

<html>

<head>
    <title>SceneForge</title>
</head>

<body style="font-family: Calibri; font-size: 13pt">
    <p style="font-size: 17pt"><b>6.1.4. A műveletek metódusainak leprogramozása</b></p>
    <p>A műveletek a témakörből három olyan egyszerű műveletet mutatok be, ami az objektumok csúcsain végezhető el.</p>
    <p><b>Csúcs átméretezés (Vertex Scale)</b></p>
    <p>Az első ilyen művelet az átméretezés, ami a csúcsok közötti távolságok nagyságát változtatja meg. Ez egy viszonylag egyszerű feladat, amiben mindössze csak arra kell figyelni, hogy az átméretezés középpontja ne a koordinátarendszer középpontja legyen, hanem a kiválasztott csúcsok középpontja. Ez úgy érhető el, hogyha az átméretezés előtt kivonjuk a kiválasztás középpontját a csúcs koordinátáiból, majd azt utólag ismét hozzáadjuk a már átméretezett koordinátákhoz, vagyis:</p>
    <p>1. Először kivonjuk a kiválasztás középpontját (Vertex – Center)<br />2. Utána végrehajtjuk az átméretezést (Vertex * Delta)<br />3. Végül a középpontot hozzáadjuk az új koordinátákhoz (Vertex + Center)</p>
    <p>Az átméretezés megvalósítása a következőképpen néz ki:</p>
    <p style="font-family: Consolas; font-size: 11pt">
        <span style="color: #000080"><b>class procedure</b></span> TVertexScale.Execute(VertexList: TVertexList; Delta: TVertex);<br />
        <span style="color: #000080"><b>var</b></span><br />
        &nbsp;&nbsp;Center, Vertex: TVertex;<br />
        &nbsp;&nbsp;I: Integer;<br />
        <span style="color: #000080"><b>begin</b></span><br />
        &nbsp;&nbsp;Center := VertexList.Center;<br />
        &nbsp;&nbsp;<span style="color: #000080"><b>for</b></span> I := <span style="color: #0000FF">0</span> <span style="color: #000080"><b>to</b></span> VertexList.Count - <span style="color: #0000FF">1</span> <span style="color: #000080">
            <b>
                do<br />
                &nbsp;&nbsp;begin
            </b>
        </span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;Vertex := VertexList.GetVertex(I);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Vertex.X := ((Vertex.X - Center.X) * Delta.X) + Center.X;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Vertex.Y := ((Vertex.Y - Center.Y) * Delta.Y) + Center.Y;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;Vertex.Z := ((Vertex.Z - Center.Z) * Delta.Z) + Center.Z;<br />
        &nbsp;&nbsp;<span style="color: #000080"><b>end</b></span>;<br />
        <span style="color: #000080"><b>end</b></span>;
    </p>
    <p><b>Csúcs forgatás (Vertex Rotate)</b></p>
    <p>A forgatás művelet a csúcsokat a kijelölés középpontja körül forgatja el. A középponttal itt is számolni kell, ráadásul ez az átméretezésnél már bonyolultabb feladat. Végrehajtásához rotációs mátrix alkalmazása szükséges. A művelet a következőképpen valósítható meg:</p>
    <p style="font-family: Consolas; font-size: 11pt">
        <span style="color: #000080"><b>class procedure</b></span> TVertexRotate.Execute(VertexList: TVertexList; Delta: TVertex);<br />
        <span style="color: #000080"><b>var</b></span><br />
        &nbsp;&nbsp;Center, Vertex: TVertex;<br />
        &nbsp;&nbsp;I: Integer;<br />
        &nbsp;&nbsp;VX, VY, VZ: Double;<br />
        &nbsp;&nbsp;RotationMatrix: TDoubleMatrix;<br />
        <span style="color: #000080">
            <b>
                begin<br />
                &nbsp;&nbsp;with
            </b>
        </span>Self.Create <span style="color: #000080">
            <b>
                do<br />
                &nbsp;&nbsp;&nbsp;&nbsp;try
            </b>
        </span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Center := VertexList.Center;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;RotationMatrix := MatrixEulerSetup(Delta.X, Delta.Y, Delta.Z,<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Round(Center.X), Round(Center.Y), Round(Center.Z));<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>for</b></span> I := <span style="color: #0000FF">0</span> <span style="color: #000080"><b>to</b></span> VertexList.Count - <span style="color: #0000FF">1</span> <span style="color: #000080">
            <b>
                do<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;begin
            </b>
        </span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex := VertexList.GetVertex(I);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.X := Vertex.X - RotationMatrix[<span style="color: #0000FF">3</span>, <span style="color: #0000FF">0</span>];<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.Y := Vertex.Y - RotationMatrix[<span style="color: #0000FF">3</span>, <span style="color: #0000FF">1</span>];<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.Z := Vertex.Z - RotationMatrix[<span style="color: #0000FF">3</span>, <span style="color: #0000FF">2</span>];<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VX := (Vertex.X * RotationMatrix[<span style="color: #0000FF">0</span>, <span style="color: #0000FF">0</span>]) +<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Vertex.Y * RotationMatrix[<span style="color: #0000FF">0</span>, <span style="color: #0000FF">1</span>]) +<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Vertex.Z * RotationMatrix[<span style="color: #0000FF">0</span>, <span style="color: #0000FF">2</span>]) + RotationMatrix[<span style="color: #0000FF">3</span>, <span style="color: #0000FF">0</span>];<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VY := (Vertex.X * RotationMatrix[<span style="color: #0000FF">1</span>, <span style="color: #0000FF">0</span>]) +<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Vertex.Y * RotationMatrix[<span style="color: #0000FF">1</span>, <span style="color: #0000FF">1</span>]) +<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Vertex.Z * RotationMatrix[<span style="color: #0000FF">1</span>, <span style="color: #0000FF">2</span>]) + RotationMatrix[<span style="color: #0000FF">3</span>, <span style="color: #0000FF">1</span>];<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;VZ := (Vertex.X * RotationMatrix[<span style="color: #0000FF">2</span>, <span style="color: #0000FF">0</span>]) +<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Vertex.Y * RotationMatrix[<span style="color: #0000FF">2</span>, <span style="color: #0000FF">1</span>]) +<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(Vertex.Z * RotationMatrix[<span style="color: #0000FF">2</span>, <span style="color: #0000FF">2</span>]) + RotationMatrix[<span style="color: #0000FF">3</span>, <span style="color: #0000FF">2</span>];<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.X := VX;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.Y := VY;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.Z := VZ;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>end</b></span>;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>finally</b></span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>end</b></span>;<br />
        <span style="color: #000080"><b>end</b></span>;
    </p>
    <p>A forgatási művelet nem annyira bonyolult, mint amilyennek első ránézésre kinéz. A rotációs mátrix kezelése, valamint az azt beállító MatrixEulerSetup metódus tartalma olyan általános matematikai összefüggéseken alapszik, amelyek szinte minden 3D grafikai alkalmazásban megtalálhatók. Amennyiben alapjaiban értjük ezeket az összefüggéseket, úgy könnyedén hozzá tudjuk igazítani a saját programunkhoz.</p>
    <p><b>Csúcs emelés (Vertex Raise)</b></p>
    <p>Az emelés nevű művelet egy csúcspont mozgatásának hatására több csúcsot mozgat el. A fő csúcs pozícióját nekünk kell meghatároznunk, aminek hatására a többi csúcspont új helye automatikusan kiszámításra kerül. Alkalmazását tekintve az emelés terepek, domborzatok és íves felületek kialakításra használható. A SceneForge jelenleg fejlesztés alatt álló verziója a vertex emelésen kívül egyéb terepek létrehozására használható lehetőséget nem biztosít. A fejlettebb terepkészítési eszközök a későbbikben kerülnek kifejlesztésre.</p>
    <p>A programban hat különböző emelés típus (RaiseType) van. A különböző típusok mindössze az alakot meghatározó delta frakció (DeltaFraction) nevű paraméterben térnek el egymástól. A különböző emelés típusok által létrehozható alakzatok, és a hozzájuk tartozó delta frakciók képletei a következő táblázatban láthatók.</p>
    <p>
        <table align="center" cellpadding="3" cellspacing="1" style="border-color: #000000; border-width: 0; background-color: #000000; width: 720px">
            <tr><td colspan="3" style="color: #FFFFFF; width: 720px"><center><b>Az emelés művelet típusainak bemutatása</b></center></td></tr>
            <tr><td style="background-color: #FFFFFF; width: 240px"><center><b><img height="130" src="6.1.4.1.png" width="220" /><br />ΔF = 0</b></center></td><td style="background-color: #FFFFFF; width: 240px"><center><b><img height="130" src="6.1.4.2.png" width="220" /><br />ΔF = 1 – √ΔF</b></center></td><td style="background-color: #FFFFFF; width: 240px"><center><b><img height="130" src="6.1.4.3.png" width="220" /><br />ΔF = 1 – ΔF</b></center></td></tr>
            <tr><td style="background-color: #FFFFFF; width: 240px"><center><b><img height="130" src="6.1.4.4.png" width="220" /><br />ΔF = 1 – ((3 – 2 · ΔF) · ΔF<sup>2</sup>)</b></center></td><td style="background-color: #FFFFFF; width: 240px"><center><b><img height="130" src="6.1.4.5.png" width="220" /><br />ΔF = 1 – ΔF<sup>2</sup></b></center></td><td style="background-color: #FFFFFF; width: 240px"><center><b><img height="130" src="6.1.4.6.png" width="220" /><br />ΔF = 1</b></center></td></tr>
        </table>
    </p>
    <p>Az emelés művelet forráskódja:</p>
    <p style="font-family: Consolas; font-size: 11pt">
        <span style="color: #000080"><b>class procedure</b></span> TVertexRaise.Execute(FinalVertices: TVertexList;<br />
        &nbsp;&nbsp;Delta: TVertex; DeltaPercentages: TIntegerList; RaiseType: Integer);<br />
        <span style="color: #000080"><b>var</b></span><br />
        &nbsp;&nbsp;I: Integer;<br />
        &nbsp;&nbsp;DeltaFraction: Double;<br />
        &nbsp;&nbsp;Vertex, TempDelta: TVertex;<br />
        <span style="color: #000080">
            <b>
                begin<br />
                &nbsp;&nbsp;with
            </b>
        </span> Self.Create <span style="color: #000080">
            <b>
                do<br />
                &nbsp;&nbsp;&nbsp;&nbsp;try
            </b>
        </span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TempDelta := TVertex.Create;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>for</b></span> I := <span style="color: #0000FF">0</span> <span style="color: #000080"><b>to</b></span> FinalVertices.Count - <span style="color: #0000FF">1</span> <span style="color: #000080">
            <b>
                do<br />
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;begin
            </b>
        </span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex := FinalVertices.GetVertex(I);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TempDelta.Assign(Delta);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;DeltaFraction := DeltaPercentages[I] / <span style="color: #0000FF">100</span>;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>case</b></span> RaiseType <span style="color: #000080"><b>of</b></span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000FF">0</span>: DeltaFraction := <span style="color: #0000FF">0</span>;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000FF">1</span>: DeltaFraction := <span style="color: #0000FF">1</span> - Sqrt(DeltaFraction);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000FF">2</span>: DeltaFraction := <span style="color: #0000FF">1</span> - DeltaFraction;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000FF">3</span>: DeltaFraction := <span style="color: #0000FF">1</span> - ((<span style="color: #0000FF">3</span> - <span style="color: #0000FF">2</span> * DeltaFraction) *<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sqr(DeltaFraction));<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000FF">4</span>: DeltaFraction := <span style="color: #0000FF">1</span> - Sqr(DeltaFraction);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #0000FF">5</span>: DeltaFraction := <span style="color: #0000FF">1</span>;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>end</b></span>;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TempDelta.X := TempDelta.X * DeltaFraction;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TempDelta.Y := TempDelta.Y * DeltaFraction;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TempDelta.Z := TempDelta.Z * DeltaFraction;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Vertex.Subtract(TempDelta);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>end</b></span>;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;FreeAndNil(TempDelta);<br />
        &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>finally</b></span><br />
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Free;<br />
        &nbsp;&nbsp;&nbsp;&nbsp;<span style="color: #000080"><b>end</b></span>;<br />
        <span style="color: #000080"><b>end</b></span>;
    </p>
    <p>A táblázatban bemutatott hat emelés típus képletének meghatározása a forráskód közepén látható. A delta frakció segítségével kiszámolt értékeknek a csúcsokból történő kivonásával kapjuk meg a csúcsok új pozícióját.</p>
</body>

</html>